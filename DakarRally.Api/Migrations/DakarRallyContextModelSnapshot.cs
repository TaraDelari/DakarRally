// <auto-generated />
using System;
using DakarRally.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DakarRally.Api.Migrations
{
    [DbContext(typeof(DakarRallyContext))]
    partial class DakarRallyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DakarRally.Common.Models.Malfunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MalfunctionType");

                    b.Property<DateTime>("Time");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Malfunctions");
                });

            modelBuilder.Entity("DakarRally.Common.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Distance");

                    b.Property<int>("RaceStatus");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("UpdateRate");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DakarRally.Common.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DistanceTraveled");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<int>("HeavyMalfunctionProbability");

                    b.Property<int>("LightMalfunctionProbability");

                    b.Property<DateTime>("ManufacturingDate");

                    b.Property<int>("MaxSpeed");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("RaceId");

                    b.Property<int>("RepairTime");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("VehicleStatus");

                    b.Property<int>("VehicleType");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DakarRally.Common.Models.Malfunction", b =>
                {
                    b.HasOne("DakarRally.Common.Models.Vehicle", "Vehicle")
                        .WithMany("Malfunctions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DakarRally.Common.Models.Vehicle", b =>
                {
                    b.HasOne("DakarRally.Common.Models.Race", "Race")
                        .WithMany("Vehicles")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
